package io.swagger.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.undertow.Handlers;
import io.undertow.Undertow;
import io.undertow.server.RoutingHandler;
import io.undertow.util.Headers;

public class MainUndertow {

    public static void main(String[] args) {

        String json= "{\"swagger\":\"2.0\",\"info\":{\"description\":\"No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\",\"version\":\"1.0.0\",\"title\":\"Swagger Server\"},\"host\":\"example.com\",\"schemes\":[\"http\",\"https\"],\"basePath\":\"/scoring\",\"paths\":{\"/score\":{\"get\":{\"summary\":\"Score Credit Request\",\"description\":\"\",\"operationId\":\"score\",\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"salary\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"amount\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"Status\",\"schema\":{\"$ref\":\"#/definitions/InlineResponse200\"}}}}}},\"definitions\":{\"InlineResponse200\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"string\"}}}}}";
        System.out.println(json);
        RoutingHandler routingHandler = Handlers.routing().get("/scoring/score", httpServerExchange -> {
            String salary = httpServerExchange.getQueryParameters().get("salary").getFirst();
            String amount = httpServerExchange.getQueryParameters().get("amount").getFirst();
            double ratio = Integer.valueOf(salary) / Integer.valueOf(amount);
            InlineResponse200 scoreStatus = new InlineResponse200();
            String message = "";
            if (ratio >= 3) {
                scoreStatus.setStatus("ACCEPTE");
            } else if (ratio >= 2) {
                scoreStatus.setStatus("ENCOURS");
            } else {
                scoreStatus.setStatus("REFUSE");
            }
            ObjectMapper mapper = new ObjectMapper();

            httpServerExchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
            httpServerExchange.getResponseSender().send(mapper.writeValueAsString(scoreStatus));

        }).get("/swagger.json",httpServerExchange -> {
            httpServerExchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
            httpServerExchange.getResponseSender().send(json);
        });

        Undertow server = Undertow.builder()
                .addHttpListener(8080, "0.0.0.0")
                .setHandler(routingHandler)
                .build();
        server.start();
    }
}
